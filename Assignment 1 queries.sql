USE org;

-- 1. Basic Queries:

-- 1.1. List all customers.
select CustomerID,Name from customers;

-- 1.2. Show all products in the 'Electronics' category.
select ProductID,Name from products
Where Category = 'Electronics';

-- 1.3. Find the total number of orders placed.
select count(*) AS Totalorder FROM orders;

-- 1.4. Display the details of the most recent order.
select * from orders order by Orderdate DESC
LIMIT 1;

-- 2. Joins and Relationships:

-- 2.1. List all products along with the names of the customers who ordered them.
SELECT
    P.ProductID,
    P.Name AS ProductName,
    O.CustomerID,
    C.Name AS CustomerName
FROM
    OrderDetails OD
JOIN
    Orders O ON OD.OrderID = O.OrderID
JOIN
    Products P ON OD.ProductID = P.ProductID
JOIN
    Customers C ON O.CustomerID = C.CustomerID;

-- 2.2. Show orders that include more than one product.
SELECT
    O.OrderID,
    O.CustomerID,
    O.OrderDate,
    O.TotalAmount,
    COUNT(OD.ProductID) AS NumberOfProducts
FROM
    Orders O
JOIN
    OrderDetails OD ON O.OrderID = OD.OrderID
GROUP BY
    O.OrderID
HAVING
    NumberOfProducts > 1;
    
    -- 2.3. Find the total sales amount for each customer.
    SELECT
    C.CustomerID,
    C.Name AS CustomerName,
    SUM(O.TotalAmount) AS TotalSalesAmount
FROM
    Customers C
JOIN
    Orders O ON C.CustomerID = O.CustomerID
GROUP BY
    C.CustomerID, C.Name;
    
    -- 3. Aggregation and Grouping:
    
    -- 3.1. Calculate the total revenue generated by each product category.
    
SELECT
    P.Category,
    SUM(OD.Quantity * P.Price) AS TotalRevenue
FROM
    OrderDetails OD
JOIN
    Products P ON OD.ProductID = P.ProductID
GROUP BY
    P.Category;
    
    -- 3.2. Determine the average order value.
    SELECT
    AVG(TotalAmount) AS AverageOrderValue
FROM
    Orders;
    
    -- 3.3. Find the month with the highest number of orders.
    SELECT
    EXTRACT(MONTH FROM OrderDate) AS OrderMonth,
    COUNT(*) AS NumberOfOrders
FROM
    Orders
GROUP BY
    OrderMonth
ORDER BY
    NumberOfOrders DESC
LIMIT 1;

-- 4. Subqueries and Nested Queries:

-- 4.1. Identify customers who have not placed any order.
SELECT
    CustomerID,
    Name AS CustomerName
FROM
    Customers
WHERE
    CustomerID NOT IN (
        SELECT DISTINCT CustomerID
        FROM Orders
    );

-- 4.2. Find products that have never been ordered.
SELECT
    ProductID,
    Name AS ProductName
FROM
    Products
WHERE
    ProductID NOT IN (
        SELECT DISTINCT ProductID
        FROM OrderDetails
    );
    
    -- 4.3. Show the top 3 best-selling products.
    SELECT
    P.ProductID,
    P.Name AS ProductName,
    P.Category,
    SUM(OD.Quantity) AS TotalQuantitySold
FROM
    Products P
LEFT JOIN
    OrderDetails OD ON P.ProductID = OD.ProductID
GROUP BY
    P.ProductID, P.Name, P.Category
ORDER BY
    TotalQuantitySold DESC
LIMIT 3;

-- 5. Date and Time Function.

-- 5.1. List orders placed in last month.
SELECT
    OrderID,
    CustomerID,
    OrderDate,
    TotalAmount
FROM
    Orders
WHERE
    OrderDate >= CURDATE() - INTERVAL 1 MONTH
    AND OrderDate < CURDATE();
    
    -- 5.2. Determine the oldest customer in terms of membership duration.
SELECT
    CustomerID,
    Name AS CustomerName,
    JoinDate,
    DATEDIFF(CURDATE(), JoinDate) AS MembershipDurationInDays
FROM
    Customers
ORDER BY
    JoinDate ASC
LIMIT 1;

-- 6. Advanced Queries.
-- 6.1 Rank customers on there total spending.
SELECT
    CustomerID,
    Name AS CustomerName,
    TotalSpending,
    RANK() OVER (ORDER BY TotalSpending DESC) AS SpendingRank
FROM (
    SELECT
        C.CustomerID,
        C.Name,
        COALESCE(SUM(O.TotalAmount), 0) AS TotalSpending
    FROM
        Customers C
    LEFT JOIN
        Orders O ON C.CustomerID = O.CustomerID
    GROUP BY
        C.CustomerID, C.Name
) AS CustomerSpending
ORDER BY
    SpendingRank;

-- 6.2. Identify the most popular product category.
SELECT
    P.Category,
    SUM(OD.Quantity) AS TotalQuantitySold
FROM
    Products P
LEFT JOIN
    OrderDetails OD ON P.ProductID = OD.ProductID
GROUP BY
    P.Category
ORDER BY
    TotalQuantitySold DESC
LIMIT 1;

-- 6.3. Calculate the month-over-month growth rate in sales.
WITH MonthlySales AS (
    SELECT
        DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
        SUM(TotalAmount) AS MonthlyTotal
    FROM
        Orders
    GROUP BY
        DATE_FORMAT(OrderDate, '%Y-%m')
)

SELECT
    a.Month,
    a.MonthlyTotal,
    b.MonthlyTotal AS PreviousMonthTotal,
    (a.MonthlyTotal - b.MonthlyTotal) / b.MonthlyTotal * 100 AS GrowthRate
FROM
    MonthlySales a
JOIN
    MonthlySales b ON a.Month = DATE_SUB(b.Month, INTERVAL 1 MONTH);

-- 7. Data manipulation and update.

-- 7.1. Add a new customer to the Customers table.
INSERT INTO Customers (CustomerID, Name, Email, JoinDate)
VALUES
    (11, 'Arun Kumar', 'arunkumar@example.com', '2022-01-15');

-- 7.2. Update the price of a specific product.
UPDATE Products
SET Price = 555.55
WHERE ProductID = 5;
